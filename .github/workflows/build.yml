name: Build

on: [ push, pull_request ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # get swig 3 on linux
        os: [ ubuntu-20.04, windows-latest ]
        buildType: [ RelWithDebInfo ]
        include:
          - os: ubuntu-20.04
            cmake_generator: '-G "Ninja"'
          - os: windows-latest
            cmake_extra: '-DBUILD_BINDING_DOTNET=OFF -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake'
            cmake_generator: '-G "Visual Studio 16 2019" -A x64'
    env:
      BuildType: ${{matrix.buildType}}
      BuildDir: ${{github.workspace}}/BLD
      InstallPrefix: ${{github.workspace}}/INSTALL
      PKG_CONFIG_PATH: ${{matrix.pkg_config_path}}
      VCPKG_DEFAULT_TRIPLET: x64-windows
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
      SCCACHE_DIR: ${{github.workspace}}/SCCACHE

    steps:

      - uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 2.7
          architecture: x64

      - name: Setup Developer Command Prompt (on Windows)
        uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'
        with:
          arch: x64

      # it's weird that it needs qpid-python for tests; one would guess this is built in this repo, but it is not
      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools qpid-python

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -yq --no-install-suggests --no-install-recommends install cmake ninja-build libboost-dev libboost-program-options-dev libboost-system-dev libboost-test-dev uuid-dev libnss3-dev libnss3-tools libsasl2-dev sasl2-bin swig3.0 python-dev valgrind ruby
          wget -q https://github.com/mozilla/sccache/releases/download/v0.3.0/sccache-v0.3.0-x86_64-unknown-linux-musl.tar.gz
          tar -xf sccache-v0.3.0-x86_64-unknown-linux-musl.tar.gz sccache-v0.3.0-x86_64-unknown-linux-musl/sccache
          sudo mv sccache-v0.3.0-x86_64-unknown-linux-musl/sccache /usr/bin/sccache
          sudo chmod +x /usr/bin/sccache

      - name: Cache scoop directory (on Windows)
        uses: actions/cache@v3
        if: runner.os == 'Windows'
        with:
          path: $HOME\scoop
          key: ${{ runner.os }}-scoop-${{ env.OS_VER }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-scoop-${{ env.OS_VER }}-
            ${{ runner.os }}-scoop-

      - name: Cache vcpkg downloads (on Windows)
        uses: actions/cache@v3
        if: runner.os == 'Windows'
        with:
          path: C:\vcpkg\downloads
          key: ${{ runner.os }}-vcpkg-download-${{ env.OS_VER }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-download-${{ env.OS_VER }}-
            ${{ runner.os }}-vcpkg-download-
      - name: Cache vcpkg installed (on Windows)
        uses: actions/cache@v3
        if: runner.os == 'Windows'
        with:
          path: C:\vcpkg\installed
          key: ${{ runner.os }}-vcpkg-installed-${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-installed-${{ matrix.os }}-
            ${{ runner.os }}-vcpkg-installed-

      - name: Cache sccache
        uses: actions/cache@v3
        with:
          path: "${{ env.SCCACHE_DIR }}"
          key: ${{ runner.os }}-sccache-${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-sccache-${{ matrix.os }}-
            ${{ runner.os }}-sccache-

      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser # Optional: Needed to run a remote script the first time
          iex "& {$(irm get.scoop.sh)} -RunAsAdmin"
          scoop install ninja sccache
          ~\scoop\apps\sccache\current\sccache.exe --help
          sccache.exe --help
          vcpkg install boost-program-options boost-system boost-test boost-date-time boost-thread boost-chrono boost-format boost-ptr-container boost-assign boost-parameter boost-foreach boost-utility
          vcpkg integrate install
        shell: pwsh

      - name: cmake configure
        run: |
          cmake -S "${{github.workspace}}" -B "${{env.BuildDir}}" -G Ninja \
            -DCMAKE_C_COMPILER="cl.exe" -DCMAKE_CXX_COMPILER="cl.exe" \
            -DCMAKE_C_COMPILER_LAUNCHER=sccache.exe -DCMAKE_CXX_COMPILER_LAUNCHER=sccache.exe \
            "-DCMAKE_BUILD_TYPE=${BuildType}" \
            "-DCMAKE_INSTALL_PREFIX=${InstallPrefix}" \
            ${{matrix.cmake_extra}}
        shell: pwsh

      # https://stackoverflow.com/a/46187862/1047788
      # https://github.com/jiridanek/qpid-cpp/actions/runs/3314156604/jobs/5473066487#step:12:1472
      - name: cmake build/install
        run: |
          cmake --build "${{env.BuildDir}}" --config ${BuildType}
          cmake --install "${{env.BuildDir}}" --config ${BuildType}
        shell: pwsh

#      - id: ctest
#        name: ctest
#        working-directory: ${{env.BuildDir}}
#        run: PYTHONPATH=${InstallPrefix}/lib/python2.7/site-packages ctest -C ${BuildType} -V -T Test --no-compress-output ${{matrix.ctest_extra}}
#        shell: bash
#
#      - name: Upload Test results
#        if: always() && (steps.ctest.outcome == 'failure' || steps.ctest.outcome == 'success')
#        uses: actions/upload-artifact@v2
#        with:
#          name: Test_Results_${{matrix.os}}_${{matrix.buildType}}
#          path: ${{env.BuildDir}}/Testing/**/*.xml

      - name: Environment
        if: always()
        run: env -0 | sort -z | tr '\0' '\n'
        shell: bash
