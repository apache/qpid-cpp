name: Build

on: [ push, pull_request ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        buildType: [ RelWithDebInfo ]
        include:
          - os: windows-latest
            cmake_extra: '-DBUILD_BINDING_DOTNET=OFF -A x64 -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake'
            cmake_generator: '-G "Visual Studio 16 2019"'
    env:
      BuildType: ${{matrix.buildType}}
      BuildDir: ${{github.workspace}}/BLD
      InstallPrefix: ${{github.workspace}}/INSTALL
      PKG_CONFIG_PATH: ${{matrix.pkg_config_path}}
      VCPKG_DEFAULT_TRIPLET: x64-windows
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'

    steps:

      - uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 2.7
          architecture: x64

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel tox flake8

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt install -y cmake libboost-dev libboost-program-options-dev libboost-system-dev libboost-test-dev uuid-dev libnss3-dev libnss3-tools libsasl2-dev sasl2-bin swig python-dev valgrind ruby
          wget https://github.com/mozilla/sccache/releases/download/v0.3.0/sccache-dist-v0.3.0-x86_64-unknown-linux-musl.tar.gz
          sudo tar -xf sccache-dist-v0.3.0-x86_64-unknown-linux-musl.tar.gz sccache-dist-v0.3.0-x86_64-unknown-linux-musl.tar.gz/sccache-dist -C /usr/local/bin
          sudo ln -s /usr/local/bin/sccache-dist /usr/local/bin/sccache

      - uses: actions/cache@v3
        if: runner.os == 'Windows'
        with:
          path: C:\vcpkg\downloads
          key: ${{ runner.os }}-vcpkg-download-${{ env.OS_VER }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-download-${{ env.OS_VER }}-
            ${{ runner.os }}-vcpkg-download-
      - uses: actions/cache@v3
        if: runner.os == 'Windows'
        with:
          path: C:\vcpkg\installed
          key: ${{ runner.os }}-vcpkg-installed-${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-installed-${{ matrix.os }}-
            ${{ runner.os }}-vcpkg-installed-

      - uses: actions/cache@v3
        if: runner.os == 'Linux'
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-sccache-${{ matrix.os }}-
            ${{ runner.os }}-sccache-
      - uses: actions/cache@v3
        if: runner.os == 'Windows'
        with:
          path: %LOCALAPPDATA%\Mozilla\sccache
          key: ${{ runner.os }}-sccache-${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-sccache-${{ matrix.os }}-
            ${{ runner.os }}-sccache-

      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          scoop install sccache
          vcpkg install boost-program-options boost-system boost-test boost-date-time boost-thread boost-chrono boost-format
          vcpkg integrate install

      - name: cmake configure
        run: |
          cmake -S "${{github.workspace}}" -B "${{env.BuildDir}}" \
            -DCMAKE_C_COMPILER_LAUNCHER=sccache \ -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
            "-DCMAKE_BUILD_TYPE=${BuildType}" \
            "-DCMAKE_INSTALL_PREFIX=${InstallPrefix}" \
            ${{matrix.cmake_extra}}
        shell: bash

      - name: cmake build/install
        run: cmake --build "${{env.BuildDir}}" --config ${BuildType} --parallel 6 -t install
        shell: bash

      - id: ctest
        name: ctest
        working-directory: ${{env.BuildDir}}
        run: PYTHONPATH=${InstallPrefix}/lib/python2.7/site-packages ctest -C ${BuildType} -V -T Test --no-compress-output ${{matrix.ctest_extra}}
        shell: bash

      - name: Upload Test results
        if: always() && (steps.ctest.outcome == 'failure' || steps.ctest.outcome == 'success')
        uses: actions/upload-artifact@v2
        with:
          name: Test_Results_${{matrix.os}}_${{matrix.buildType}}
          path: ${{env.BuildDir}}/Testing/**/*.xml

      - name: Environment
        if: always()
        run: env -0 | sort -z | tr '\0' '\n'
        shell: bash
